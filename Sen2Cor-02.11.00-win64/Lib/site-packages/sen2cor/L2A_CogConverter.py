# This entire module is used to import COG files into the program and export the
# results as COG files aswell instead of the traditional jp2000.
# It is being called from importBandImg and exportTifImage in L2A_Tables.


from osgeo import gdal
import os.path
import numpy
from L2A_XmlParser import L2A_XmlParser


class CogConverter(object):
    def __init__(self):
        test = 0
        self.array = None
        self.geo_transform = None

    def set_config(self, config):
        self.config = config

    def get_array(self):
        return self.array

    def set_array(self, array):
        self.array = array
    
    def set_geo_transform(self, geo_transform):
        self.geo_transform = geo_transform

    def get_geo_transofrm(self):
        return self.geo_transform

    def set_projection(self, projection):
        self.projection = projection

    def get_projection(self):
        return self.projection

    def set_tif_import_options(self, tif_import_filename):
        self.tif_import_filename = tif_import_filename

    def set_tif_export_options(self, tif_export_filename, overviews = 4):
        self.tif_export_filename = tif_export_filename
        self.overviews = overviews

    def tif_to_array(self):
        row0 = self.config.row0
        col0 = self.config.col0
        nrow_win = self.config.nrow_win
        ncol_win = self.config.ncol_win
        ROI = self.config.ROI

        tif_dataset = gdal.Open(self.tif_import_filename)

        self.geo_transform = tif_dataset.GetGeoTransform()
        self.projection = tif_dataset.GetProjection()
        # TODO I AM HERE
        # Still not all metadata implemented.
        # What is the best way to carry the meta data over from import to export?

        # Get Header or Metadata or something like that and save it for later. Multiple functions exist like .GetProjection or .GetSpatialRef etc.

        scale = tif_dataset.RasterXSize / 10980.0 # If an input image is not 10980 pixels large

        top = 0
        bottom = tif_dataset.RasterYSize
        left = 0
        right = tif_dataset.RasterXSize

        if ROI == 'AUTO':
            raise Exception("ROI Auto not implemented yet with COG files")
            pass # not implemented yet!
        elif ROI == 'MANUAL':
            rowTop = int(scale * (row0 - nrow_win * 0.5))
            rowBottom = int(scale * (row0 + nrow_win * 0.5))
            colLeft = int(scale * (col0 - ncol_win * 0.5))
            colRight = int(scale * (col0 + ncol_win * 0.5))

            # If ROI is out if bounds simply move it back in
            if rowTop < top:
                rowBottom += (top - rowTop)
                rowTop = top
            if rowBottom > bottom:
                rowTop -= (rowBottom - bottom)
                rowBottom = bottom
            if colLeft < left:
                colRight += (left - colLeft)
                colLeft = left
            if colRight > right:
                colLeft -= (colRight - right)
                colRight = right

        elif ROI == 'OFF':
            rowTop = top
            rowBottom = bottom
            colLeft = left
            colRight = right

        self.array = (tif_dataset.ReadAsArray(xoff=rowTop, yoff=colLeft,
                                              xsize=rowBottom - rowTop, ysize=colRight - colLeft)).astype('uint16')

        '''
        self.array = tif_dataset.ReadAsArray(xoff=self.tif_import_xoff, yoff=self.tif_import_yoff,
                                         xsize=self.tif_import_xsize, ysize=self.tif_import_ysize,
                                         buf_xsize=int(self.tif_import_xsize / self.tif_import_resolution),
                                         buf_ysize=int(self.tif_import_ysize / self.tif_import_resolution),
                                         # All options from here on are left at default, they are only included for ease of testing
                                         buf_type=None, buf_obj=None,
                                         resample_alg=gdal.GRIORA_NearestNeighbour,
                                         callback=None,
                                         callback_data=None,
                                         interleave='band')
        '''


    def array_to_tif(self):
        xp = L2A_XmlParser(self.config, 'GIPP')
        node = xp.getTree('Common_Section', 'COG_Format')

        # GML Header and that stuff is still missing!
        filename = self.tif_export_filename

        isPVI = 'PVI' in os.path.basename(filename)
        isTCI = 'TCI' in os.path.basename(filename)
        isVIS = 'VIS' in os.path.basename(filename)
        isSCL = 'SCL' in os.path.basename(filename)
        isCLD = 'CLD' in os.path.basename(filename)
        isSNW = 'SNW' in os.path.basename(filename)
        isDDV = 'DDV' in os.path.basename(filename)

        compression_algorithm = node.Compression_Algorithm
        block_x_size = str(node.Internal_Tiling).split(",")[0]
        block_y_size = str(node.Internal_Tiling).split(",")[1]

        if not isSCL:
            resampling_method = str(node.Resampling_Method) # Should this be a user defined option or just always AVERAGE?
        else:
            resampling_method = "MODE"

        # Determine size, pixelFormat and amount of layers depending on type of exported layer
        x_size = self.array.shape[0]
        y_size = self.array.shape[1]
        if isPVI or isTCI:
            layers = self.array.shape[2]
            pixelFormat = gdal.GDT_Byte
        elif isSCL or isCLD or isSNW or isDDV:
            layers = 1
            pixelFormat = gdal.GDT_Byte
        else:
            layers = 1
            pixelFormat = gdal.GDT_UInt16

        MEM_driver = gdal.GetDriverByName("MEM")
        MEM_dataset = MEM_driver.Create("", x_size, y_size, layers, pixelFormat)

        MEM_dataset.SetGeoTransform(self.geo_transform)
        MEM_dataset.SetProjection(self.projection)
        # TODO Insert geobox, see glymurWrapper for basic idea

        # Copy the actual data from the array
        # Multiple layers (RGB)
        if isPVI or isTCI:
            for i in range(0, layers):
                MEM_dataset.GetRasterBand(i+1).WriteArray(self.array[:, :, i])
        else:
            # One single layer
            MEM_dataset.GetRasterBand(1).WriteArray(self.array)

        # As you can not build overviews after creating the final image using
        # GTiff driver, you need to work in memory and create a copy of that
        # NOTE: Are overviews really necessary? Maybe only for the TCI?
        # overviewlist is depending on resolution of the current image
        if self.config.resolution == 10:
            overviewlist = [2, 6, 12, 36]
        elif self.config.resolution == 20:
            overviewlist = [3, 6, 18]
        else:
            overviewlist = [2, 6]

        MEM_dataset.BuildOverviews(resampling = resampling_method, overviewlist = overviewlist)

        # Writes the actual file to disk by copying from the MEM_dataset
        GTiff_driver = gdal.GetDriverByName('GTiff')
        GTiff_driver.CreateCopy(self.tif_export_filename, MEM_dataset,
                                options=["COPY_SRC_OVERVIEWS=YES", "TILED=YES", "COMPRESS="+compression_algorithm,
                                         "BLOCKXSIZE="+block_x_size, "BLOCKYSIZE="+block_y_size])
